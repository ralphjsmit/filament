function c({columns:u,isLive:a}){return{error:void 0,isLoading:!1,columns:u,isLive:a,init(){if(!this.columns||this.columns.length===0){this.columns=[];return}},get hasToggleable(){return!this.columns||this.columns.length===0?!1:this.columns.some(t=>t.type==="group"?t.columns?.some(e=>e.toggleable!==!1):t.toggleable!==!1)},get groupedColumns(){let t={};return this.columns.filter(e=>e.type==="group").forEach(e=>{t[e.name]=this.calculateGroupedColumns(e)}),t},calculateGroupedColumns(t){if(!t?.columns)return{checked:!1,disabled:!0,indeterminate:!1};let e=t.columns.filter(s=>s.toggleable!==!1);if(e.length===0)return{checked:!0,disabled:!0,indeterminate:!1};let l=e.filter(s=>s.toggled).length,o=t.columns.filter(s=>s.toggleable===!1);return l===0&&o.length>0?{checked:!0,disabled:!1,indeterminate:!0}:l===0?{checked:!1,disabled:!1,indeterminate:!1}:l===e.length?{checked:!0,disabled:!1,indeterminate:!1}:{checked:!0,disabled:!1,indeterminate:!0}},getColumn(t,e=null){return e?this.columns.find(o=>o.type==="group"&&o.name===e)?.columns?.find(o=>o.name===t):this.columns.find(l=>l.name===t)},toggleGroup(t){let e=this.columns.find(n=>n.type==="group"&&n.name===t);if(!e?.columns)return;let l=this.calculateGroupedColumns(e);if(l.disabled)return;let s=e.columns.filter(n=>n.toggleable!==!1).some(n=>n.toggled),r=l.indeterminate?!0:!s;e.columns.filter(n=>n.toggleable!==!1).forEach(n=>{n.toggled=r}),this.columns=[...this.columns],this.isLive&&this.applyTableToggleColumns()},toggleColumn(t,e=null){let l=this.getColumn(t,e);!l||l.toggleable===!1||(l.toggled=!l.toggled,this.columns=[...this.columns],this.isLive&&this.applyTableToggleColumns())},reorderColumns(t){let e=t.map(l=>l.split("::"));this.reorderTopLevel(e),this.isLive&&this.applyTableToggleColumns()},reorderGroupColumns(t,e){let l=this.columns.find(r=>r.type==="group"&&r.name===e);if(!l)return;let o=t.map(r=>r.split("::")),s=[];o.forEach(([r,n])=>{let i=l.columns.find(g=>g.name===n);i&&s.push(i)}),l.columns=s,this.columns=[...this.columns],this.isLive&&this.applyTableToggleColumns()},reorderTopLevel(t){let e=this.columns,l=[];t.forEach(([o,s])=>{let r=e.find(n=>o==="group"?n.type==="group"&&n.name===s:o==="column"?n.type!=="group"&&n.name===s:!1);r&&l.push(r)}),this.columns=l},async applyTableToggleColumns(){this.isLoading=!0;try{await this.$wire.commit(),this.error=void 0}catch(t){this.error="Failed to update column visibility",console.error("Table toggle columns error:",t)}finally{this.isLoading=!1}}}}export{c as default};
