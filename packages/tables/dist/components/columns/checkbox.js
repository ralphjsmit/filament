// packages/tables/resources/js/components/columns/checkbox.js
function checkboxTableColumn({ name, recordKey, state }) {
  return {
    error: void 0,
    isLoading: false,
    state,
    init() {
      Livewire.hook(
        "commit",
        ({ component, commit, succeed, fail, respond }) => {
          succeed(({ snapshot, effect }) => {
            this.$nextTick(() => {
              if (this.isLoading) {
                return;
              }
              if (component.id !== this.$root.closest("[wire\\:id]").attributes["wire:id"].value) {
                return;
              }
              const serverState = this.getServerState();
              if (serverState === void 0 || Alpine.raw(this.state) === serverState) {
                return;
              }
              this.state = serverState;
            });
          });
        }
      );
      this.$watch("state", async () => {
        const serverState = this.getServerState();
        if (serverState === void 0 || Alpine.raw(this.state) === serverState) {
          return;
        }
        this.isLoading = true;
        const response = await this.$wire.updateTableColumnState(
          name,
          recordKey,
          this.state
        );
        this.error = response?.error ?? void 0;
        if (!this.error && this.$refs.serverState) {
          this.$refs.serverState.value = this.state ? "1" : "0";
        }
        this.isLoading = false;
      });
    },
    getServerState() {
      if (!this.$refs.serverState) {
        return void 0;
      }
      return [1, "1"].includes(this.$refs.serverState.value);
    }
  };
}
export {
  checkboxTableColumn as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvY29sdW1ucy9jaGVja2JveC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hlY2tib3hUYWJsZUNvbHVtbih7IG5hbWUsIHJlY29yZEtleSwgc3RhdGUgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG5cbiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcblxuICAgICAgICBzdGF0ZSxcblxuICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgTGl2ZXdpcmUuaG9vayhcbiAgICAgICAgICAgICAgICAnY29tbWl0JyxcbiAgICAgICAgICAgICAgICAoeyBjb21wb25lbnQsIGNvbW1pdCwgc3VjY2VlZCwgZmFpbCwgcmVzcG9uZCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWQoKHsgc25hcHNob3QsIGVmZmVjdCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmlkICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LmNsb3Nlc3QoJ1t3aXJlXFxcXDppZF0nKS5hdHRyaWJ1dGVzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpcmU6aWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyU3RhdGUgPSB0aGlzLmdldFNlcnZlclN0YXRlKClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyU3RhdGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbHBpbmUucmF3KHRoaXMuc3RhdGUpID09PSBzZXJ2ZXJTdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gc2VydmVyU3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ3N0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlclN0YXRlID0gdGhpcy5nZXRTZXJ2ZXJTdGF0ZSgpXG5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlclN0YXRlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgQWxwaW5lLnJhdyh0aGlzLnN0YXRlKSA9PT0gc2VydmVyU3RhdGVcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuJHdpcmUudXBkYXRlVGFibGVDb2x1bW5TdGF0ZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkS2V5LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSByZXNwb25zZT8uZXJyb3IgPz8gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXJyb3IgJiYgdGhpcy4kcmVmcy5zZXJ2ZXJTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnNlcnZlclN0YXRlLnZhbHVlID0gdGhpcy5zdGF0ZSA/ICcxJyA6ICcwJ1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2VydmVyU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJHJlZnMuc2VydmVyU3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbMSwgJzEnXS5pbmNsdWRlcyh0aGlzLiRyZWZzLnNlcnZlclN0YXRlLnZhbHVlKVxuICAgICAgICB9LFxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLG9CQUFxQyxFQUFFLE1BQU0sV0FBVyxNQUFNLEdBQUc7QUFDcEUsU0FBTztBQUFBLElBQ0gsT0FBTztBQUFBLElBRVAsV0FBVztBQUFBLElBRVg7QUFBQSxJQUVBLE9BQU87QUFDSCxlQUFTO0FBQUEsUUFDTDtBQUFBLFFBQ0EsQ0FBQyxFQUFFLFdBQVcsUUFBUSxTQUFTLE1BQU0sUUFBUSxNQUFNO0FBQy9DLGtCQUFRLENBQUMsRUFBRSxVQUFVLE9BQU8sTUFBTTtBQUM5QixpQkFBSyxVQUFVLE1BQU07QUFDakIsa0JBQUksS0FBSyxXQUFXO0FBQ2hCO0FBQUEsY0FDSjtBQUVBLGtCQUNJLFVBQVUsT0FDVixLQUFLLE1BQU0sUUFBUSxhQUFhLEVBQUUsV0FDOUIsU0FDSixFQUFFLE9BQ0o7QUFDRTtBQUFBLGNBQ0o7QUFFQSxvQkFBTSxjQUFjLEtBQUssZUFBZTtBQUV4QyxrQkFDSSxnQkFBZ0IsVUFDaEIsT0FBTyxJQUFJLEtBQUssS0FBSyxNQUFNLGFBQzdCO0FBQ0U7QUFBQSxjQUNKO0FBRUEsbUJBQUssUUFBUTtBQUFBLFlBQ2pCLENBQUM7QUFBQSxVQUNMLENBQUM7QUFBQSxRQUNMO0FBQUEsTUFDSjtBQUVBLFdBQUssT0FBTyxTQUFTLFlBQVk7QUFDN0IsY0FBTSxjQUFjLEtBQUssZUFBZTtBQUV4QyxZQUNJLGdCQUFnQixVQUNoQixPQUFPLElBQUksS0FBSyxLQUFLLE1BQU0sYUFDN0I7QUFDRTtBQUFBLFFBQ0o7QUFFQSxhQUFLLFlBQVk7QUFFakIsY0FBTSxXQUFXLE1BQU0sS0FBSyxNQUFNO0FBQUEsVUFDOUI7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLO0FBQUEsUUFDVDtBQUVBLGFBQUssUUFBUSxVQUFVLFNBQVM7QUFFaEMsWUFBSSxDQUFDLEtBQUssU0FBUyxLQUFLLE1BQU0sYUFBYTtBQUN2QyxlQUFLLE1BQU0sWUFBWSxRQUFRLEtBQUssUUFBUSxNQUFNO0FBQUEsUUFDdEQ7QUFFQSxhQUFLLFlBQVk7QUFBQSxNQUNyQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsaUJBQWlCO0FBQ2IsVUFBSSxDQUFDLEtBQUssTUFBTSxhQUFhO0FBQ3pCLGVBQU87QUFBQSxNQUNYO0FBRUEsYUFBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLFNBQVMsS0FBSyxNQUFNLFlBQVksS0FBSztBQUFBLElBQ3pEO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
