// packages/tables/resources/js/components/columns/text-input.js
function textInputTableColumn({ name, recordKey, state }) {
  return {
    error: void 0,
    isLoading: false,
    state,
    init() {
      Livewire.hook(
        "commit",
        ({ component, commit, succeed, fail, respond }) => {
          succeed(({ snapshot, effect }) => {
            this.$nextTick(() => {
              if (this.isLoading) {
                return;
              }
              if (component.id !== this.$root.closest("[wire\\:id]").attributes["wire:id"].value) {
                return;
              }
              const serverState = this.getServerState();
              if (serverState === void 0 || this.getNormalizedState() === serverState) {
                return;
              }
              this.state = serverState;
            });
          });
        }
      );
      this.$watch("state", async () => {
        const serverState = this.getServerState();
        if (serverState === void 0 || this.getNormalizedState() === serverState) {
          return;
        }
        this.isLoading = true;
        const response = await this.$wire.updateTableColumnState(
          name,
          recordKey,
          this.state
        );
        this.error = response?.error ?? void 0;
        if (!this.error && this.$refs.serverState) {
          this.$refs.serverState.value = this.getNormalizedState();
        }
        this.isLoading = false;
      });
    },
    getServerState() {
      if (!this.$refs.serverState) {
        return void 0;
      }
      return [null, void 0].includes(this.$refs.serverState.value) ? "" : this.$refs.serverState.value.replaceAll(
        "\\" + String.fromCharCode(34),
        String.fromCharCode(34)
      );
    },
    getNormalizedState() {
      const state2 = Alpine.raw(this.state);
      if ([null, void 0].includes(state2)) {
        return "";
      }
      return state2;
    }
  };
}
export {
  textInputTableColumn as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvY29sdW1ucy90ZXh0LWlucHV0LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZXh0SW5wdXRUYWJsZUNvbHVtbih7IG5hbWUsIHJlY29yZEtleSwgc3RhdGUgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiB1bmRlZmluZWQsXG5cbiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcblxuICAgICAgICBzdGF0ZSxcblxuICAgICAgICBpbml0KCkge1xuICAgICAgICAgICAgTGl2ZXdpcmUuaG9vayhcbiAgICAgICAgICAgICAgICAnY29tbWl0JyxcbiAgICAgICAgICAgICAgICAoeyBjb21wb25lbnQsIGNvbW1pdCwgc3VjY2VlZCwgZmFpbCwgcmVzcG9uZCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWQoKHsgc25hcHNob3QsIGVmZmVjdCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmlkICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LmNsb3Nlc3QoJ1t3aXJlXFxcXDppZF0nKS5hdHRyaWJ1dGVzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpcmU6aWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyU3RhdGUgPSB0aGlzLmdldFNlcnZlclN0YXRlKClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyU3RhdGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE5vcm1hbGl6ZWRTdGF0ZSgpID09PSBzZXJ2ZXJTdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gc2VydmVyU3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ3N0YXRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlclN0YXRlID0gdGhpcy5nZXRTZXJ2ZXJTdGF0ZSgpXG5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlclN0YXRlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXROb3JtYWxpemVkU3RhdGUoKSA9PT0gc2VydmVyU3RhdGVcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuJHdpcmUudXBkYXRlVGFibGVDb2x1bW5TdGF0ZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkS2V5LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSByZXNwb25zZT8uZXJyb3IgPz8gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXJyb3IgJiYgdGhpcy4kcmVmcy5zZXJ2ZXJTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLnNlcnZlclN0YXRlLnZhbHVlID0gdGhpcy5nZXROb3JtYWxpemVkU3RhdGUoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2VydmVyU3RhdGUoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuJHJlZnMuc2VydmVyU3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyh0aGlzLiRyZWZzLnNlcnZlclN0YXRlLnZhbHVlKVxuICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICA6IHRoaXMuJHJlZnMuc2VydmVyU3RhdGUudmFsdWUucmVwbGFjZUFsbChcbiAgICAgICAgICAgICAgICAgICAgICAnXFxcXCcgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDM0KSxcbiAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKDM0KSxcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgfSxcblxuICAgICAgICBnZXROb3JtYWxpemVkU3RhdGUoKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IEFscGluZS5yYXcodGhpcy5zdGF0ZSlcblxuICAgICAgICAgICAgaWYgKFtudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgfSxcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixxQkFBc0MsRUFBRSxNQUFNLFdBQVcsTUFBTSxHQUFHO0FBQ3JFLFNBQU87QUFBQSxJQUNILE9BQU87QUFBQSxJQUVQLFdBQVc7QUFBQSxJQUVYO0FBQUEsSUFFQSxPQUFPO0FBQ0gsZUFBUztBQUFBLFFBQ0w7QUFBQSxRQUNBLENBQUMsRUFBRSxXQUFXLFFBQVEsU0FBUyxNQUFNLFFBQVEsTUFBTTtBQUMvQyxrQkFBUSxDQUFDLEVBQUUsVUFBVSxPQUFPLE1BQU07QUFDOUIsaUJBQUssVUFBVSxNQUFNO0FBQ2pCLGtCQUFJLEtBQUssV0FBVztBQUNoQjtBQUFBLGNBQ0o7QUFFQSxrQkFDSSxVQUFVLE9BQ1YsS0FBSyxNQUFNLFFBQVEsYUFBYSxFQUFFLFdBQzlCLFNBQ0osRUFBRSxPQUNKO0FBQ0U7QUFBQSxjQUNKO0FBRUEsb0JBQU0sY0FBYyxLQUFLLGVBQWU7QUFFeEMsa0JBQ0ksZ0JBQWdCLFVBQ2hCLEtBQUssbUJBQW1CLE1BQU0sYUFDaEM7QUFDRTtBQUFBLGNBQ0o7QUFFQSxtQkFBSyxRQUFRO0FBQUEsWUFDakIsQ0FBQztBQUFBLFVBQ0wsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKO0FBRUEsV0FBSyxPQUFPLFNBQVMsWUFBWTtBQUM3QixjQUFNLGNBQWMsS0FBSyxlQUFlO0FBRXhDLFlBQ0ksZ0JBQWdCLFVBQ2hCLEtBQUssbUJBQW1CLE1BQU0sYUFDaEM7QUFDRTtBQUFBLFFBQ0o7QUFFQSxhQUFLLFlBQVk7QUFFakIsY0FBTSxXQUFXLE1BQU0sS0FBSyxNQUFNO0FBQUEsVUFDOUI7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLO0FBQUEsUUFDVDtBQUVBLGFBQUssUUFBUSxVQUFVLFNBQVM7QUFFaEMsWUFBSSxDQUFDLEtBQUssU0FBUyxLQUFLLE1BQU0sYUFBYTtBQUN2QyxlQUFLLE1BQU0sWUFBWSxRQUFRLEtBQUssbUJBQW1CO0FBQUEsUUFDM0Q7QUFFQSxhQUFLLFlBQVk7QUFBQSxNQUNyQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsaUJBQWlCO0FBQ2IsVUFBSSxDQUFDLEtBQUssTUFBTSxhQUFhO0FBQ3pCLGVBQU87QUFBQSxNQUNYO0FBRUEsYUFBTyxDQUFDLE1BQU0sTUFBUyxFQUFFLFNBQVMsS0FBSyxNQUFNLFlBQVksS0FBSyxJQUN4RCxLQUNBLEtBQUssTUFBTSxZQUFZLE1BQU07QUFBQSxRQUN6QixPQUFPLE9BQU8sYUFBYSxFQUFFO0FBQUEsUUFDN0IsT0FBTyxhQUFhLEVBQUU7QUFBQSxNQUMxQjtBQUFBLElBQ1Y7QUFBQSxJQUVBLHFCQUFxQjtBQUNqQixZQUFNQSxTQUFRLE9BQU8sSUFBSSxLQUFLLEtBQUs7QUFFbkMsVUFBSSxDQUFDLE1BQU0sTUFBUyxFQUFFLFNBQVNBLE1BQUssR0FBRztBQUNuQyxlQUFPO0FBQUEsTUFDWDtBQUVBLGFBQU9BO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFsic3RhdGUiXQp9Cg==
