// packages/schemas/resources/js/components/tabs.js
function tabsSchemaComponent({
  activeTab,
  isTabPersistedInQueryString,
  livewireId,
  tab,
  tabQueryStringKey
}) {
  return {
    tab,
    init() {
      this.$watch("tab", () => this.updateQueryString());
      const tabs = this.getTabs();
      if (!this.tab || !tabs.includes(this.tab)) {
        this.tab = tabs[activeTab - 1];
      }
      Livewire.hook(
        "commit",
        ({ component, commit, succeed, fail, respond }) => {
          succeed(({ snapshot, effect }) => {
            this.$nextTick(() => {
              if (component.id !== livewireId) {
                return;
              }
              const tabs2 = this.getTabs();
              if (!tabs2.includes(this.tab)) {
                this.tab = tabs2[activeTab - 1] ?? this.tab;
              }
            });
          });
        }
      );
    },
    getTabs() {
      if (!this.$refs.tabsData) {
        return [];
      }
      return JSON.parse(this.$refs.tabsData.value);
    },
    updateQueryString() {
      if (!isTabPersistedInQueryString) {
        return;
      }
      const url = new URL(window.location.href);
      url.searchParams.set(tabQueryStringKey, this.tab);
      history.replaceState(null, document.title, url.toString());
    }
  };
}
export {
  tabsSchemaComponent as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdGFicy5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGFic1NjaGVtYUNvbXBvbmVudCh7XG4gICAgYWN0aXZlVGFiLFxuICAgIGlzVGFiUGVyc2lzdGVkSW5RdWVyeVN0cmluZyxcbiAgICBsaXZld2lyZUlkLFxuICAgIHRhYixcbiAgICB0YWJRdWVyeVN0cmluZ0tleSxcbn0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWIsXG5cbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuJHdhdGNoKCd0YWInLCAoKSA9PiB0aGlzLnVwZGF0ZVF1ZXJ5U3RyaW5nKCkpXG5cbiAgICAgICAgICAgIGNvbnN0IHRhYnMgPSB0aGlzLmdldFRhYnMoKVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMudGFiIHx8ICF0YWJzLmluY2x1ZGVzKHRoaXMudGFiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFiID0gdGFic1thY3RpdmVUYWIgLSAxXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMaXZld2lyZS5ob29rKFxuICAgICAgICAgICAgICAgICdjb21taXQnLFxuICAgICAgICAgICAgICAgICh7IGNvbXBvbmVudCwgY29tbWl0LCBzdWNjZWVkLCBmYWlsLCByZXNwb25kIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VlZCgoeyBzbmFwc2hvdCwgZWZmZWN0IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LmlkICE9PSBsaXZld2lyZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYnMgPSB0aGlzLmdldFRhYnMoKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWJzLmluY2x1ZGVzKHRoaXMudGFiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhYiA9IHRhYnNbYWN0aXZlVGFiIC0gMV0gPz8gdGhpcy50YWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0VGFicygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy4kcmVmcy50YWJzRGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLiRyZWZzLnRhYnNEYXRhLnZhbHVlKVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZVF1ZXJ5U3RyaW5nKCkge1xuICAgICAgICAgICAgaWYgKCFpc1RhYlBlcnNpc3RlZEluUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KHRhYlF1ZXJ5U3RyaW5nS2V5LCB0aGlzLnRhYilcblxuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgZG9jdW1lbnQudGl0bGUsIHVybC50b1N0cmluZygpKVxuICAgICAgICB9LFxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLG9CQUFxQztBQUFBLEVBQ3hDO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNKLEdBQUc7QUFDQyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBRUEsT0FBTztBQUNILFdBQUssT0FBTyxPQUFPLE1BQU0sS0FBSyxrQkFBa0IsQ0FBQztBQUVqRCxZQUFNLE9BQU8sS0FBSyxRQUFRO0FBRTFCLFVBQUksQ0FBQyxLQUFLLE9BQU8sQ0FBQyxLQUFLLFNBQVMsS0FBSyxHQUFHLEdBQUc7QUFDdkMsYUFBSyxNQUFNLEtBQUssWUFBWSxDQUFDO0FBQUEsTUFDakM7QUFFQSxlQUFTO0FBQUEsUUFDTDtBQUFBLFFBQ0EsQ0FBQyxFQUFFLFdBQVcsUUFBUSxTQUFTLE1BQU0sUUFBUSxNQUFNO0FBQy9DLGtCQUFRLENBQUMsRUFBRSxVQUFVLE9BQU8sTUFBTTtBQUM5QixpQkFBSyxVQUFVLE1BQU07QUFDakIsa0JBQUksVUFBVSxPQUFPLFlBQVk7QUFDN0I7QUFBQSxjQUNKO0FBRUEsb0JBQU1BLFFBQU8sS0FBSyxRQUFRO0FBRTFCLGtCQUFJLENBQUNBLE1BQUssU0FBUyxLQUFLLEdBQUcsR0FBRztBQUMxQixxQkFBSyxNQUFNQSxNQUFLLFlBQVksQ0FBQyxLQUFLLEtBQUs7QUFBQSxjQUMzQztBQUFBLFlBQ0osQ0FBQztBQUFBLFVBQ0wsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLElBRUEsVUFBVTtBQUNOLFVBQUksQ0FBQyxLQUFLLE1BQU0sVUFBVTtBQUN0QixlQUFPLENBQUM7QUFBQSxNQUNaO0FBRUEsYUFBTyxLQUFLLE1BQU0sS0FBSyxNQUFNLFNBQVMsS0FBSztBQUFBLElBQy9DO0FBQUEsSUFFQSxvQkFBb0I7QUFDaEIsVUFBSSxDQUFDLDZCQUE2QjtBQUM5QjtBQUFBLE1BQ0o7QUFFQSxZQUFNLE1BQU0sSUFBSSxJQUFJLE9BQU8sU0FBUyxJQUFJO0FBQ3hDLFVBQUksYUFBYSxJQUFJLG1CQUFtQixLQUFLLEdBQUc7QUFFaEQsY0FBUSxhQUFhLE1BQU0sU0FBUyxPQUFPLElBQUksU0FBUyxDQUFDO0FBQUEsSUFDN0Q7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbInRhYnMiXQp9Cg==
