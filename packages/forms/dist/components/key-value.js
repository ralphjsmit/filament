// packages/forms/resources/js/components/key-value.js
function keyValueFormComponent({ state }) {
  return {
    state,
    rows: [],
    init() {
      this.updateRows();
      if (this.rows.length <= 0) {
        this.rows.push({ key: "", value: "" });
      } else {
        this.updateState();
      }
      this.$watch("state", (state2, oldState) => {
        const getLength = (value) => {
          if (value === null) {
            return 0;
          }
          if (Array.isArray(value)) {
            return value.length;
          }
          if (typeof value !== "object") {
            return 0;
          }
          return Object.keys(value).length;
        };
        if (getLength(state2) === 0 && getLength(oldState) === 0) {
          return;
        }
        this.updateRows();
      });
    },
    addRow() {
      this.rows.push({ key: "", value: "" });
      this.updateState();
    },
    deleteRow(index) {
      this.rows.splice(index, 1);
      if (this.rows.length <= 0) {
        this.addRow();
      }
      this.updateState();
    },
    reorderRows(event) {
      const rows = Alpine.raw(this.rows);
      this.rows = [];
      const reorderedRow = rows.splice(event.oldIndex, 1)[0];
      rows.splice(event.newIndex, 0, reorderedRow);
      this.$nextTick(() => {
        this.rows = rows;
        this.updateState();
      });
    },
    // https://github.com/filamentphp/filament/issues/1107
    // https://github.com/filamentphp/filament/issues/12824
    updateRows() {
      const state2 = Alpine.raw(this.state);
      const mergedRows = state2.map(({ key, value }) => ({ key, value }));
      this.rows.forEach((row) => {
        if (row.key === "" || row.key === null) {
          mergedRows.push({
            key: "",
            value: row.value
          });
        }
      });
      this.rows = mergedRows;
    },
    updateState() {
      let state2 = [];
      this.rows.forEach((row) => {
        if (row.key === "" || row.key === null) {
          return;
        }
        state2.push({
          key: row.key,
          value: row.value
        });
      });
      if (JSON.stringify(this.state) !== JSON.stringify(state2)) {
        this.state = state2;
      }
    }
  };
}
export {
  keyValueFormComponent as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMva2V5LXZhbHVlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlWYWx1ZUZvcm1Db21wb25lbnQoeyBzdGF0ZSB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGUsXG5cbiAgICAgICAgcm93czogW10sXG5cbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUm93cygpXG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJvd3MubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3MucHVzaCh7IGtleTogJycsIHZhbHVlOiAnJyB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ3N0YXRlJywgKHN0YXRlLCBvbGRTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdldExlbmd0aCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0TGVuZ3RoKHN0YXRlKSA9PT0gMCAmJiBnZXRMZW5ndGgob2xkU3RhdGUpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUm93cygpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFJvdygpIHtcbiAgICAgICAgICAgIHRoaXMucm93cy5wdXNoKHsga2V5OiAnJywgdmFsdWU6ICcnIH0pXG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKVxuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZVJvdyhpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5yb3dzLnNwbGljZShpbmRleCwgMSlcblxuICAgICAgICAgICAgaWYgKHRoaXMucm93cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpXG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVvcmRlclJvd3MoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBBbHBpbmUucmF3KHRoaXMucm93cylcblxuICAgICAgICAgICAgdGhpcy5yb3dzID0gW11cblxuICAgICAgICAgICAgY29uc3QgcmVvcmRlcmVkUm93ID0gcm93cy5zcGxpY2UoZXZlbnQub2xkSW5kZXgsIDEpWzBdXG4gICAgICAgICAgICByb3dzLnNwbGljZShldmVudC5uZXdJbmRleCwgMCwgcmVvcmRlcmVkUm93KVxuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dzID0gcm93c1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maWxhbWVudHBocC9maWxhbWVudC9pc3N1ZXMvMTEwN1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmlsYW1lbnRwaHAvZmlsYW1lbnQvaXNzdWVzLzEyODI0XG4gICAgICAgIHVwZGF0ZVJvd3MoKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IEFscGluZS5yYXcodGhpcy5zdGF0ZSlcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZFJvd3MgPSBzdGF0ZS5tYXAoKHsga2V5LCB2YWx1ZSB9KSA9PiAoeyBrZXksIHZhbHVlIH0pKVxuXG4gICAgICAgICAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJvdy5rZXkgPT09ICcnIHx8IHJvdy5rZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUm93cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMucm93cyA9IG1lcmdlZFJvd3NcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IFtdXG5cbiAgICAgICAgICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocm93LmtleSA9PT0gJycgfHwgcm93LmtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiByb3cua2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LnZhbHVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZSkgIT09IEpTT04uc3RyaW5naWZ5KHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLHNCQUF1QyxFQUFFLE1BQU0sR0FBRztBQUNyRCxTQUFPO0FBQUEsSUFDSDtBQUFBLElBRUEsTUFBTSxDQUFDO0FBQUEsSUFFUCxPQUFPO0FBQ0gsV0FBSyxXQUFXO0FBRWhCLFVBQUksS0FBSyxLQUFLLFVBQVUsR0FBRztBQUN2QixhQUFLLEtBQUssS0FBSyxFQUFFLEtBQUssSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUFBLE1BQ3pDLE9BQU87QUFDSCxhQUFLLFlBQVk7QUFBQSxNQUNyQjtBQUVBLFdBQUssT0FBTyxTQUFTLENBQUNBLFFBQU8sYUFBYTtBQUN0QyxjQUFNLFlBQVksQ0FBQyxVQUFVO0FBQ3pCLGNBQUksVUFBVSxNQUFNO0FBQ2hCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGNBQUksTUFBTSxRQUFRLEtBQUssR0FBRztBQUN0QixtQkFBTyxNQUFNO0FBQUEsVUFDakI7QUFFQSxjQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzNCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGlCQUFPLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFBQSxRQUM5QjtBQUVBLFlBQUksVUFBVUEsTUFBSyxNQUFNLEtBQUssVUFBVSxRQUFRLE1BQU0sR0FBRztBQUNyRDtBQUFBLFFBQ0o7QUFFQSxhQUFLLFdBQVc7QUFBQSxNQUNwQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsU0FBUztBQUNMLFdBQUssS0FBSyxLQUFLLEVBQUUsS0FBSyxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBRXJDLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxVQUFVLE9BQU87QUFDYixXQUFLLEtBQUssT0FBTyxPQUFPLENBQUM7QUFFekIsVUFBSSxLQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3ZCLGFBQUssT0FBTztBQUFBLE1BQ2hCO0FBRUEsV0FBSyxZQUFZO0FBQUEsSUFDckI7QUFBQSxJQUVBLFlBQVksT0FBTztBQUNmLFlBQU0sT0FBTyxPQUFPLElBQUksS0FBSyxJQUFJO0FBRWpDLFdBQUssT0FBTyxDQUFDO0FBRWIsWUFBTSxlQUFlLEtBQUssT0FBTyxNQUFNLFVBQVUsQ0FBQyxFQUFFLENBQUM7QUFDckQsV0FBSyxPQUFPLE1BQU0sVUFBVSxHQUFHLFlBQVk7QUFFM0MsV0FBSyxVQUFVLE1BQU07QUFDakIsYUFBSyxPQUFPO0FBRVosYUFBSyxZQUFZO0FBQUEsTUFDckIsQ0FBQztBQUFBLElBQ0w7QUFBQTtBQUFBO0FBQUEsSUFJQSxhQUFhO0FBQ1QsWUFBTUEsU0FBUSxPQUFPLElBQUksS0FBSyxLQUFLO0FBQ25DLFlBQU0sYUFBYUEsT0FBTSxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU0sT0FBTyxFQUFFLEtBQUssTUFBTSxFQUFFO0FBRWpFLFdBQUssS0FBSyxRQUFRLENBQUMsUUFBUTtBQUN2QixZQUFJLElBQUksUUFBUSxNQUFNLElBQUksUUFBUSxNQUFNO0FBQ3BDLHFCQUFXLEtBQUs7QUFBQSxZQUNaLEtBQUs7QUFBQSxZQUNMLE9BQU8sSUFBSTtBQUFBLFVBQ2YsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKLENBQUM7QUFFRCxXQUFLLE9BQU87QUFBQSxJQUNoQjtBQUFBLElBRUEsY0FBYztBQUNWLFVBQUlBLFNBQVEsQ0FBQztBQUViLFdBQUssS0FBSyxRQUFRLENBQUMsUUFBUTtBQUN2QixZQUFJLElBQUksUUFBUSxNQUFNLElBQUksUUFBUSxNQUFNO0FBQ3BDO0FBQUEsUUFDSjtBQUVBLFFBQUFBLE9BQU0sS0FBSztBQUFBLFVBQ1AsS0FBSyxJQUFJO0FBQUEsVUFDVCxPQUFPLElBQUk7QUFBQSxRQUNmLENBQUM7QUFBQSxNQUNMLENBQUM7QUFFRCxVQUFJLEtBQUssVUFBVSxLQUFLLEtBQUssTUFBTSxLQUFLLFVBQVVBLE1BQUssR0FBRztBQUN0RCxhQUFLLFFBQVFBO0FBQUEsTUFDakI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogWyJzdGF0ZSJdCn0K
